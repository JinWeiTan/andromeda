name: Build and Release Andromeda

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build:
    name: Build and Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux (x86_64)
          - os: ubuntu-latest
            rust-target: x86_64-unknown-linux-gnu
            asset-name: andromeda-linux-amd64

          # macOS (Intel)
          - os: macos-latest
            rust-target: x86_64-apple-darwin
            asset-name: andromeda-macos-amd64

          # macOS (Apple Silicon/ARM)
          - os: macos-latest
            rust-target: aarch64-apple-darwin
            asset-name: andromeda-macos-arm64

          # Windows
          - os: windows-latest
            rust-target: x86_64-pc-windows-msvc
            asset-name: andromeda-windows-amd64.exe

    steps:
      - uses: actions/checkout@v3

      - name: Install the rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: 1.85.0
          targets: ${{ matrix.rust-target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.rust-target }} --manifest-path ./cli/Cargo.toml

      - name: Prepare binary
        shell: bash
        run: |
          cd target/${{ matrix.rust-target }}/release/
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv andromeda.exe ${{ matrix.asset-name }}
          else
            mv andromeda ${{ matrix.asset-name }}
          fi

      - name: Upload Binary to Release (Tag Only)
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/${{ matrix.rust-target }}/release/${{ matrix.asset-name }}
          asset_name: ${{ matrix.asset-name }}
          draft: false
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload Binary as Artifact (Main Branch)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset-name }}
          path: target/${{ matrix.rust-target }}/release/${{ matrix.asset-name }}
